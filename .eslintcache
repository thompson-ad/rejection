[{"/Users/aaronthompson/myProjects/rejection/src/index.tsx":"1","/Users/aaronthompson/myProjects/rejection/src/reportWebVitals.ts":"2","/Users/aaronthompson/myProjects/rejection/src/app/store.ts":"3","/Users/aaronthompson/myProjects/rejection/src/App.tsx":"4","/Users/aaronthompson/myProjects/rejection/src/features/score/scoreSlice.ts":"5","/Users/aaronthompson/myProjects/rejection/src/features/questions/questionsSlice.ts":"6","/Users/aaronthompson/myProjects/rejection/src/features/questions/AskQuestionForm.tsx":"7","/Users/aaronthompson/myProjects/rejection/src/app/NavBar.tsx":"8","/Users/aaronthompson/myProjects/rejection/src/features/questions/QuestionsList.tsx":"9","/Users/aaronthompson/myProjects/rejection/src/mocks/browser.ts":"10","/Users/aaronthompson/myProjects/rejection/src/mocks/handlers.ts":"11","/Users/aaronthompson/myProjects/rejection/src/api/client.ts":"12","/Users/aaronthompson/myProjects/rejection/src/features/questions/Question.tsx":"13","/Users/aaronthompson/myProjects/rejection/src/styles/lib.tsx":"14"},{"size":780,"mtime":1609099178651,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1609084896059,"results":"17","hashOfConfig":"16"},{"size":527,"mtime":1609091065689,"results":"18","hashOfConfig":"16"},{"size":684,"mtime":1609247200648,"results":"19","hashOfConfig":"16"},{"size":516,"mtime":1609091012793,"results":"20","hashOfConfig":"16"},{"size":2563,"mtime":1609239306667,"results":"21","hashOfConfig":"16"},{"size":1790,"mtime":1609238927468,"results":"22","hashOfConfig":"16"},{"size":687,"mtime":1609327781177,"results":"23","hashOfConfig":"16"},{"size":1490,"mtime":1609337972440,"results":"24","hashOfConfig":"16"},{"size":216,"mtime":1609099027777,"results":"25","hashOfConfig":"16"},{"size":1431,"mtime":1609240252338,"results":"26","hashOfConfig":"16"},{"size":1278,"mtime":1609097158056,"results":"27","hashOfConfig":"16"},{"size":1928,"mtime":1609338212703,"results":"28","hashOfConfig":"16"},{"size":307,"mtime":1609327839719,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1hbw3vy",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aaronthompson/myProjects/rejection/src/index.tsx",[],[],"/Users/aaronthompson/myProjects/rejection/src/reportWebVitals.ts",["62"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/aaronthompson/myProjects/rejection/src/app/store.ts",["63"],"import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport questionsReducer from '../features/questions/questionsSlice';\nimport scoreReducer from '../features/score/scoreSlice';\n\nconst store = configureStore({\n  reducer: {\n    questions: questionsReducer,\n    score: scoreReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport default store;\n","/Users/aaronthompson/myProjects/rejection/src/App.tsx",[],"/Users/aaronthompson/myProjects/rejection/src/features/score/scoreSlice.ts",[],"/Users/aaronthompson/myProjects/rejection/src/features/questions/questionsSlice.ts",[],"/Users/aaronthompson/myProjects/rejection/src/features/questions/AskQuestionForm.tsx",[],"/Users/aaronthompson/myProjects/rejection/src/app/NavBar.tsx",[],"/Users/aaronthompson/myProjects/rejection/src/features/questions/QuestionsList.tsx",[],"/Users/aaronthompson/myProjects/rejection/src/mocks/browser.ts",[],"/Users/aaronthompson/myProjects/rejection/src/mocks/handlers.ts",["64","65"],"/Users/aaronthompson/myProjects/rejection/src/api/client.ts",["66","67"],"/* eslint-disable @typescript-eslint/no-explicit-any */\nexport interface HttpResponse<T> extends Response {\n  parsedBody?: T;\n}\n\n// Our http function now takes in a generic parameter for the type of the response body\n// in the consuming code, our data variable will be strongly typed to whatever T is\nexport async function http<T>(request: RequestInfo): Promise<HttpResponse<T>> {\n  const response: HttpResponse<T> = await fetch(request);\n  try {\n    // may error if there is no body\n    response.parsedBody = await response.json();\n  } catch (error) {\n    console.error(error);\n  }\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  return response;\n}\n\n// GET\nexport async function get<T>(path: string, args: RequestInit = { method: 'get' }): Promise<HttpResponse<T>> {\n  return await http<T>(new Request(path, args));\n}\n\n// POST\nexport async function post<T>(\n  path: string,\n  body: any,\n  args: RequestInit = { method: 'post', body: JSON.stringify(body) },\n): Promise<HttpResponse<T>> {\n  return await http<T>(new Request(path, args));\n}\n\n// PUT\nexport async function put<T>(\n  path: string,\n  body: any,\n  args: RequestInit = { method: 'put', body: JSON.stringify(body) },\n): Promise<HttpResponse<T>> {\n  return await http<T>(new Request(path, args));\n}\n","/Users/aaronthompson/myProjects/rejection/src/features/questions/Question.tsx",[],"/Users/aaronthompson/myProjects/rejection/src/styles/lib.tsx",[],{"ruleId":"68","severity":1,"message":"69","line":3,"column":25,"nodeType":"70","messageId":"71","endLine":3,"endColumn":57},{"ruleId":"68","severity":1,"message":"69","line":15,"column":31,"nodeType":"70","messageId":"71","endLine":15,"endColumn":36},{"ruleId":"72","severity":1,"message":"73","line":12,"column":40,"nodeType":"74","messageId":"75","endLine":12,"endColumn":43,"suggestions":"76"},{"ruleId":"72","severity":1,"message":"73","line":16,"column":31,"nodeType":"74","messageId":"75","endLine":16,"endColumn":34,"suggestions":"77"},{"ruleId":"68","severity":1,"message":"78","line":30,"column":3,"nodeType":"79","messageId":"80","endLine":30,"endColumn":12},{"ruleId":"68","severity":1,"message":"78","line":39,"column":3,"nodeType":"79","messageId":"80","endLine":39,"endColumn":12},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["81","82"],["83","84"],"Argument 'body' should be typed with a non-any type.","Identifier","anyTypedArg",{"messageId":"85","fix":"86","desc":"87"},{"messageId":"88","fix":"89","desc":"90"},{"messageId":"85","fix":"91","desc":"87"},{"messageId":"88","fix":"92","desc":"90"},"suggestUnknown",{"range":"93","text":"94"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"93","text":"95"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"96","text":"94"},{"range":"96","text":"95"},[367,370],"unknown","never",[471,474]]